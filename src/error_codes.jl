# autogenerated by deps/error_codes.jl using https://www.postgresql.org/docs/current/errcodes-appendix.html

# Code and Class are special types for representing fixed-length strings in type parameters
# Note that passing an iterator to an NTuple{N, T} constructor will take the first N items

struct Class
    chars::NTuple{2, Char}
end

Class(str::String) = Class(NTuple{2, Char}(codeunits(str)))

macro c_str(str)
    Class(str)
end

function Base.show(io::IO, c::Class)
    print(io, "c\"", c.chars..., '"')
end

struct ErrorCode
    chars::NTuple{5, Char}
end

ErrorCode(str::String) = ErrorCode(NTuple{5, Char}(codeunits(str)))

macro e_str(str)
    ErrorCode(str)
end

function Base.show(io::IO, e::ErrorCode)
    print(io, "e\"", e.chars..., '"')
end


const SuccessfulCompletionClass = PQResultError{c"00"}

const SuccessfulCompletion = PQResultError{c"00", e"00000"}


const WarningClass = PQResultError{c"01"}

const WarningWarning = PQResultError{c"01", e"01000"}
const DynamicResultSetsReturnedWarning = PQResultError{c"01", e"0100C"}
const ImplicitZeroBitPaddingWarning = PQResultError{c"01", e"01008"}
const NullValueEliminatedInSetFunctionWarning = PQResultError{c"01", e"01003"}
const PrivilegeNotGrantedWarning = PQResultError{c"01", e"01007"}
const PrivilegeNotRevokedWarning = PQResultError{c"01", e"01006"}
const StringDataRightTruncationWarning = PQResultError{c"01", e"01004"}
const DeprecatedFeatureWarning = PQResultError{c"01", e"01P01"}


const NoDataClass = PQResultError{c"02"}

const NoDataWarning = PQResultError{c"02", e"02000"}
const NoAdditionalDynamicResultSetsReturnedWarning = PQResultError{c"02", e"02001"}


const SqlStatementNotYetCompleteErrorClass = PQResultError{c"03"}

const SqlStatementNotYetComplete = PQResultError{c"03", e"03000"}


const ConnectionExceptionErrorClass = PQResultError{c"08"}

const ConnectionException = PQResultError{c"08", e"08000"}
const ConnectionDoesNotExist = PQResultError{c"08", e"08003"}
const ConnectionFailure = PQResultError{c"08", e"08006"}
const SqlclientUnableToEstablishSqlconnection = PQResultError{c"08", e"08001"}
const SqlserverRejectedEstablishmentOfSqlconnection = PQResultError{c"08", e"08004"}
const TransactionResolutionUnknown = PQResultError{c"08", e"08007"}
const ProtocolViolation = PQResultError{c"08", e"08P01"}


const TriggeredActionExceptionErrorClass = PQResultError{c"09"}

const TriggeredActionException = PQResultError{c"09", e"09000"}


const FeatureNotSupportedErrorClass = PQResultError{c"0A"}

const FeatureNotSupported = PQResultError{c"0A", e"0A000"}


const InvalidTransactionInitiationErrorClass = PQResultError{c"0B"}

const InvalidTransactionInitiation = PQResultError{c"0B", e"0B000"}


const LocatorExceptionErrorClass = PQResultError{c"0F"}

const LocatorException = PQResultError{c"0F", e"0F000"}
const InvalidLocatorSpecification = PQResultError{c"0F", e"0F001"}


const InvalidGrantorErrorClass = PQResultError{c"0L"}

const InvalidGrantor = PQResultError{c"0L", e"0L000"}
const InvalidGrantOperation = PQResultError{c"0L", e"0LP01"}


const InvalidRoleSpecificationErrorClass = PQResultError{c"0P"}

const InvalidRoleSpecification = PQResultError{c"0P", e"0P000"}


const DiagnosticsExceptionErrorClass = PQResultError{c"0Z"}

const DiagnosticsException = PQResultError{c"0Z", e"0Z000"}
const StackedDiagnosticsAccessedWithoutActiveHandler = PQResultError{c"0Z", e"0Z002"}


const CaseNotFoundErrorClass = PQResultError{c"20"}

const CaseNotFound = PQResultError{c"20", e"20000"}


const CardinalityViolationErrorClass = PQResultError{c"21"}

const CardinalityViolation = PQResultError{c"21", e"21000"}


const DataExceptionErrorClass = PQResultError{c"22"}

const DataException = PQResultError{c"22", e"22000"}
const ArraySubscriptError = PQResultError{c"22", e"2202E"}
const CharacterNotInRepertoire = PQResultError{c"22", e"22021"}
const DatetimeFieldOverflow = PQResultError{c"22", e"22008"}
const DivisionByZero = PQResultError{c"22", e"22012"}
const ErrorInAssignment = PQResultError{c"22", e"22005"}
const EscapeCharacterConflict = PQResultError{c"22", e"2200B"}
const IndicatorOverflow = PQResultError{c"22", e"22022"}
const IntervalFieldOverflow = PQResultError{c"22", e"22015"}
const InvalidArgumentForLogarithm = PQResultError{c"22", e"2201E"}
const InvalidArgumentForNtileFunction = PQResultError{c"22", e"22014"}
const InvalidArgumentForNthValueFunction = PQResultError{c"22", e"22016"}
const InvalidArgumentForPowerFunction = PQResultError{c"22", e"2201F"}
const InvalidArgumentForWidthBucketFunction = PQResultError{c"22", e"2201G"}
const InvalidCharacterValueForCast = PQResultError{c"22", e"22018"}
const InvalidDatetimeFormat = PQResultError{c"22", e"22007"}
const InvalidEscapeCharacter = PQResultError{c"22", e"22019"}
const InvalidEscapeOctet = PQResultError{c"22", e"2200D"}
const InvalidEscapeSequence = PQResultError{c"22", e"22025"}
const NonstandardUseOfEscapeCharacter = PQResultError{c"22", e"22P06"}
const InvalidIndicatorParameterValue = PQResultError{c"22", e"22010"}
const InvalidParameterValue = PQResultError{c"22", e"22023"}
const InvalidPrecedingOrFollowingSize = PQResultError{c"22", e"22013"}
const InvalidRegularExpression = PQResultError{c"22", e"2201B"}
const InvalidRowCountInLimitClause = PQResultError{c"22", e"2201W"}
const InvalidRowCountInResultOffsetClause = PQResultError{c"22", e"2201X"}
const InvalidTablesampleArgument = PQResultError{c"22", e"2202H"}
const InvalidTablesampleRepeat = PQResultError{c"22", e"2202G"}
const InvalidTimeZoneDisplacementValue = PQResultError{c"22", e"22009"}
const InvalidUseOfEscapeCharacter = PQResultError{c"22", e"2200C"}
const MostSpecificTypeMismatch = PQResultError{c"22", e"2200G"}
const NullValueNotAllowed = PQResultError{c"22", e"22004"}
const NullValueNoIndicatorParameter = PQResultError{c"22", e"22002"}
const NumericValueOutOfRange = PQResultError{c"22", e"22003"}
const SequenceGeneratorLimitExceeded = PQResultError{c"22", e"2200H"}
const StringDataLengthMismatch = PQResultError{c"22", e"22026"}
const StringDataRightTruncation = PQResultError{c"22", e"22001"}
const SubstringError = PQResultError{c"22", e"22011"}
const TrimError = PQResultError{c"22", e"22027"}
const UnterminatedCString = PQResultError{c"22", e"22024"}
const ZeroLengthCharacterString = PQResultError{c"22", e"2200F"}
const FloatingPointException = PQResultError{c"22", e"22P01"}
const InvalidTextRepresentation = PQResultError{c"22", e"22P02"}
const InvalidBinaryRepresentation = PQResultError{c"22", e"22P03"}
const BadCopyFileFormat = PQResultError{c"22", e"22P04"}
const UntranslatableCharacter = PQResultError{c"22", e"22P05"}
const NotAnXmlDocument = PQResultError{c"22", e"2200L"}
const InvalidXmlDocument = PQResultError{c"22", e"2200M"}
const InvalidXmlContent = PQResultError{c"22", e"2200N"}
const InvalidXmlComment = PQResultError{c"22", e"2200S"}
const InvalidXmlProcessingInstruction = PQResultError{c"22", e"2200T"}


const IntegrityConstraintViolationErrorClass = PQResultError{c"23"}

const IntegrityConstraintViolation = PQResultError{c"23", e"23000"}
const RestrictViolation = PQResultError{c"23", e"23001"}
const NotNullViolation = PQResultError{c"23", e"23502"}
const ForeignKeyViolation = PQResultError{c"23", e"23503"}
const UniqueViolation = PQResultError{c"23", e"23505"}
const CheckViolation = PQResultError{c"23", e"23514"}
const ExclusionViolation = PQResultError{c"23", e"23P01"}


const InvalidCursorStateErrorClass = PQResultError{c"24"}

const InvalidCursorState = PQResultError{c"24", e"24000"}


const InvalidTransactionStateErrorClass = PQResultError{c"25"}

const InvalidTransactionState = PQResultError{c"25", e"25000"}
const ActiveSqlTransaction = PQResultError{c"25", e"25001"}
const BranchTransactionAlreadyActive = PQResultError{c"25", e"25002"}
const HeldCursorRequiresSameIsolationLevel = PQResultError{c"25", e"25008"}
const InappropriateAccessModeForBranchTransaction = PQResultError{c"25", e"25003"}
const InappropriateIsolationLevelForBranchTransaction = PQResultError{c"25", e"25004"}
const NoActiveSqlTransactionForBranchTransaction = PQResultError{c"25", e"25005"}
const ReadOnlySqlTransaction = PQResultError{c"25", e"25006"}
const SchemaAndDataStatementMixingNotSupported = PQResultError{c"25", e"25007"}
const NoActiveSqlTransaction = PQResultError{c"25", e"25P01"}
const InFailedSqlTransaction = PQResultError{c"25", e"25P02"}
const IdleInTransactionSessionTimeout = PQResultError{c"25", e"25P03"}


const InvalidSqlStatementNameErrorClass = PQResultError{c"26"}

const InvalidSqlStatementName = PQResultError{c"26", e"26000"}


const TriggeredDataChangeViolationErrorClass = PQResultError{c"27"}

const TriggeredDataChangeViolation = PQResultError{c"27", e"27000"}


const InvalidAuthorizationSpecificationErrorClass = PQResultError{c"28"}

const InvalidAuthorizationSpecification = PQResultError{c"28", e"28000"}
const InvalidPassword = PQResultError{c"28", e"28P01"}


const DependentPrivilegeDescriptorsStillExistErrorClass = PQResultError{c"2B"}

const DependentPrivilegeDescriptorsStillExist = PQResultError{c"2B", e"2B000"}
const DependentObjectsStillExist = PQResultError{c"2B", e"2BP01"}


const InvalidTransactionTerminationErrorClass = PQResultError{c"2D"}

const InvalidTransactionTermination = PQResultError{c"2D", e"2D000"}


const SqlRoutineExceptionErrorClass = PQResultError{c"2F"}

const SqlRoutineException = PQResultError{c"2F", e"2F000"}
const FunctionExecutedNoReturnStatement = PQResultError{c"2F", e"2F005"}
const ModifyingSqlDataNotPermitted = PQResultError{c"2F", e"2F002"}
const ProhibitedSqlStatementAttempted = PQResultError{c"2F", e"2F003"}
const ReadingSqlDataNotPermitted = PQResultError{c"2F", e"2F004"}


const InvalidCursorNameErrorClass = PQResultError{c"34"}

const InvalidCursorName = PQResultError{c"34", e"34000"}


const ExternalRoutineExceptionErrorClass = PQResultError{c"38"}

const ExternalRoutineException = PQResultError{c"38", e"38000"}
const ContainingSqlNotPermitted = PQResultError{c"38", e"38001"}
const ModifyingSqlDataNotPermittedExt = PQResultError{c"38", e"38002"}
const ProhibitedSqlStatementAttemptedExt = PQResultError{c"38", e"38003"}
const ReadingSqlDataNotPermittedExt = PQResultError{c"38", e"38004"}


const ExternalRoutineInvocationExceptionErrorClass = PQResultError{c"39"}

const ExternalRoutineInvocationException = PQResultError{c"39", e"39000"}
const InvalidSqlstateReturned = PQResultError{c"39", e"39001"}
const NullValueNotAllowedExt = PQResultError{c"39", e"39004"}
const TriggerProtocolViolated = PQResultError{c"39", e"39P01"}
const SrfProtocolViolated = PQResultError{c"39", e"39P02"}
const EventTriggerProtocolViolated = PQResultError{c"39", e"39P03"}


const SavepointExceptionErrorClass = PQResultError{c"3B"}

const SavepointException = PQResultError{c"3B", e"3B000"}
const InvalidSavepointSpecification = PQResultError{c"3B", e"3B001"}


const InvalidCatalogNameErrorClass = PQResultError{c"3D"}

const InvalidCatalogName = PQResultError{c"3D", e"3D000"}


const InvalidSchemaNameErrorClass = PQResultError{c"3F"}

const InvalidSchemaName = PQResultError{c"3F", e"3F000"}


const TransactionRollbackErrorClass = PQResultError{c"40"}

const TransactionRollback = PQResultError{c"40", e"40000"}
const TransactionIntegrityConstraintViolation = PQResultError{c"40", e"40002"}
const SerializationFailure = PQResultError{c"40", e"40001"}
const StatementCompletionUnknown = PQResultError{c"40", e"40003"}
const DeadlockDetected = PQResultError{c"40", e"40P01"}


const SyntaxErrorOrAccessRuleViolationErrorClass = PQResultError{c"42"}

const SyntaxErrorOrAccessRuleViolation = PQResultError{c"42", e"42000"}
const SyntaxError = PQResultError{c"42", e"42601"}
const InsufficientPrivilege = PQResultError{c"42", e"42501"}
const CannotCoerce = PQResultError{c"42", e"42846"}
const GroupingError = PQResultError{c"42", e"42803"}
const WindowingError = PQResultError{c"42", e"42P20"}
const InvalidRecursion = PQResultError{c"42", e"42P19"}
const InvalidForeignKey = PQResultError{c"42", e"42830"}
const InvalidName = PQResultError{c"42", e"42602"}
const NameTooLong = PQResultError{c"42", e"42622"}
const ReservedName = PQResultError{c"42", e"42939"}
const DatatypeMismatch = PQResultError{c"42", e"42804"}
const IndeterminateDatatype = PQResultError{c"42", e"42P18"}
const CollationMismatch = PQResultError{c"42", e"42P21"}
const IndeterminateCollation = PQResultError{c"42", e"42P22"}
const WrongObjectType = PQResultError{c"42", e"42809"}
const GeneratedAlways = PQResultError{c"42", e"428C9"}
const UndefinedColumn = PQResultError{c"42", e"42703"}
const UndefinedFunction = PQResultError{c"42", e"42883"}
const UndefinedTable = PQResultError{c"42", e"42P01"}
const UndefinedParameter = PQResultError{c"42", e"42P02"}
const UndefinedObject = PQResultError{c"42", e"42704"}
const DuplicateColumn = PQResultError{c"42", e"42701"}
const DuplicateCursor = PQResultError{c"42", e"42P03"}
const DuplicateDatabase = PQResultError{c"42", e"42P04"}
const DuplicateFunction = PQResultError{c"42", e"42723"}
const DuplicatePreparedStatement = PQResultError{c"42", e"42P05"}
const DuplicateSchema = PQResultError{c"42", e"42P06"}
const DuplicateTable = PQResultError{c"42", e"42P07"}
const DuplicateAlias = PQResultError{c"42", e"42712"}
const DuplicateObject = PQResultError{c"42", e"42710"}
const AmbiguousColumn = PQResultError{c"42", e"42702"}
const AmbiguousFunction = PQResultError{c"42", e"42725"}
const AmbiguousParameter = PQResultError{c"42", e"42P08"}
const AmbiguousAlias = PQResultError{c"42", e"42P09"}
const InvalidColumnReference = PQResultError{c"42", e"42P10"}
const InvalidColumnDefinition = PQResultError{c"42", e"42611"}
const InvalidCursorDefinition = PQResultError{c"42", e"42P11"}
const InvalidDatabaseDefinition = PQResultError{c"42", e"42P12"}
const InvalidFunctionDefinition = PQResultError{c"42", e"42P13"}
const InvalidPreparedStatementDefinition = PQResultError{c"42", e"42P14"}
const InvalidSchemaDefinition = PQResultError{c"42", e"42P15"}
const InvalidTableDefinition = PQResultError{c"42", e"42P16"}
const InvalidObjectDefinition = PQResultError{c"42", e"42P17"}


const WithCheckOptionViolationErrorClass = PQResultError{c"44"}

const WithCheckOptionViolation = PQResultError{c"44", e"44000"}


const InsufficientResourcesErrorClass = PQResultError{c"53"}

const InsufficientResources = PQResultError{c"53", e"53000"}
const DiskFull = PQResultError{c"53", e"53100"}
const OutOfMemory = PQResultError{c"53", e"53200"}
const TooManyConnections = PQResultError{c"53", e"53300"}
const ConfigurationLimitExceeded = PQResultError{c"53", e"53400"}


const ProgramLimitExceededErrorClass = PQResultError{c"54"}

const ProgramLimitExceeded = PQResultError{c"54", e"54000"}
const StatementTooComplex = PQResultError{c"54", e"54001"}
const TooManyColumns = PQResultError{c"54", e"54011"}
const TooManyArguments = PQResultError{c"54", e"54023"}


const ObjectNotInPrerequisiteStateErrorClass = PQResultError{c"55"}

const ObjectNotInPrerequisiteState = PQResultError{c"55", e"55000"}
const ObjectInUse = PQResultError{c"55", e"55006"}
const CantChangeRuntimeParam = PQResultError{c"55", e"55P02"}
const LockNotAvailable = PQResultError{c"55", e"55P03"}


const OperatorInterventionErrorClass = PQResultError{c"57"}

const OperatorIntervention = PQResultError{c"57", e"57000"}
const QueryCanceled = PQResultError{c"57", e"57014"}
const AdminShutdown = PQResultError{c"57", e"57P01"}
const CrashShutdown = PQResultError{c"57", e"57P02"}
const CannotConnectNow = PQResultError{c"57", e"57P03"}
const DatabaseDropped = PQResultError{c"57", e"57P04"}


const SystemErrorErrorClass = PQResultError{c"58"}

const SystemError = PQResultError{c"58", e"58000"}
const IoError = PQResultError{c"58", e"58030"}
const UndefinedFile = PQResultError{c"58", e"58P01"}
const DuplicateFile = PQResultError{c"58", e"58P02"}


const SnapshotTooOldErrorClass = PQResultError{c"72"}

const SnapshotTooOld = PQResultError{c"72", e"72000"}


const ConfigFileErrorErrorClass = PQResultError{c"F0"}

const ConfigFileError = PQResultError{c"F0", e"F0000"}
const LockFileExists = PQResultError{c"F0", e"F0001"}


const FdwErrorErrorClass = PQResultError{c"HV"}

const FdwError = PQResultError{c"HV", e"HV000"}
const FdwColumnNameNotFound = PQResultError{c"HV", e"HV005"}
const FdwDynamicParameterValueNeeded = PQResultError{c"HV", e"HV002"}
const FdwFunctionSequenceError = PQResultError{c"HV", e"HV010"}
const FdwInconsistentDescriptorInformation = PQResultError{c"HV", e"HV021"}
const FdwInvalidAttributeValue = PQResultError{c"HV", e"HV024"}
const FdwInvalidColumnName = PQResultError{c"HV", e"HV007"}
const FdwInvalidColumnNumber = PQResultError{c"HV", e"HV008"}
const FdwInvalidDataType = PQResultError{c"HV", e"HV004"}
const FdwInvalidDataTypeDescriptors = PQResultError{c"HV", e"HV006"}
const FdwInvalidDescriptorFieldIdentifier = PQResultError{c"HV", e"HV091"}
const FdwInvalidHandle = PQResultError{c"HV", e"HV00B"}
const FdwInvalidOptionIndex = PQResultError{c"HV", e"HV00C"}
const FdwInvalidOptionName = PQResultError{c"HV", e"HV00D"}
const FdwInvalidStringLengthOrBufferLength = PQResultError{c"HV", e"HV090"}
const FdwInvalidStringFormat = PQResultError{c"HV", e"HV00A"}
const FdwInvalidUseOfNullPointer = PQResultError{c"HV", e"HV009"}
const FdwTooManyHandles = PQResultError{c"HV", e"HV014"}
const FdwOutOfMemory = PQResultError{c"HV", e"HV001"}
const FdwNoSchemas = PQResultError{c"HV", e"HV00P"}
const FdwOptionNameNotFound = PQResultError{c"HV", e"HV00J"}
const FdwReplyHandle = PQResultError{c"HV", e"HV00K"}
const FdwSchemaNotFound = PQResultError{c"HV", e"HV00Q"}
const FdwTableNotFound = PQResultError{c"HV", e"HV00R"}
const FdwUnableToCreateExecution = PQResultError{c"HV", e"HV00L"}
const FdwUnableToCreateReply = PQResultError{c"HV", e"HV00M"}
const FdwUnableToEstablishConnection = PQResultError{c"HV", e"HV00N"}


const PlpgsqlErrorErrorClass = PQResultError{c"P0"}

const PlpgsqlError = PQResultError{c"P0", e"P0000"}
const RaiseException = PQResultError{c"P0", e"P0001"}
const NoDataFound = PQResultError{c"P0", e"P0002"}
const TooManyRows = PQResultError{c"P0", e"P0003"}
const AssertFailure = PQResultError{c"P0", e"P0004"}


const InternalErrorErrorClass = PQResultError{c"XX"}

const InternalError = PQResultError{c"XX", e"XX000"}
const DataCorrupted = PQResultError{c"XX", e"XX001"}
const IndexCorrupted = PQResultError{c"XX", e"XX002"}


const ERROR_NAMES = Dict(
    SuccessfulCompletion => "SuccessfulCompletion",
    WarningWarning => "WarningWarning",
    DynamicResultSetsReturnedWarning => "DynamicResultSetsReturnedWarning",
    ImplicitZeroBitPaddingWarning => "ImplicitZeroBitPaddingWarning",
    NullValueEliminatedInSetFunctionWarning => "NullValueEliminatedInSetFunctionWarning",
    PrivilegeNotGrantedWarning => "PrivilegeNotGrantedWarning",
    PrivilegeNotRevokedWarning => "PrivilegeNotRevokedWarning",
    StringDataRightTruncationWarning => "StringDataRightTruncationWarning",
    DeprecatedFeatureWarning => "DeprecatedFeatureWarning",
    NoDataWarning => "NoDataWarning",
    NoAdditionalDynamicResultSetsReturnedWarning => "NoAdditionalDynamicResultSetsReturnedWarning",
    SqlStatementNotYetComplete => "SqlStatementNotYetComplete",
    ConnectionException => "ConnectionException",
    ConnectionDoesNotExist => "ConnectionDoesNotExist",
    ConnectionFailure => "ConnectionFailure",
    SqlclientUnableToEstablishSqlconnection => "SqlclientUnableToEstablishSqlconnection",
    SqlserverRejectedEstablishmentOfSqlconnection => "SqlserverRejectedEstablishmentOfSqlconnection",
    TransactionResolutionUnknown => "TransactionResolutionUnknown",
    ProtocolViolation => "ProtocolViolation",
    TriggeredActionException => "TriggeredActionException",
    FeatureNotSupported => "FeatureNotSupported",
    InvalidTransactionInitiation => "InvalidTransactionInitiation",
    LocatorException => "LocatorException",
    InvalidLocatorSpecification => "InvalidLocatorSpecification",
    InvalidGrantor => "InvalidGrantor",
    InvalidGrantOperation => "InvalidGrantOperation",
    InvalidRoleSpecification => "InvalidRoleSpecification",
    DiagnosticsException => "DiagnosticsException",
    StackedDiagnosticsAccessedWithoutActiveHandler => "StackedDiagnosticsAccessedWithoutActiveHandler",
    CaseNotFound => "CaseNotFound",
    CardinalityViolation => "CardinalityViolation",
    DataException => "DataException",
    ArraySubscriptError => "ArraySubscriptError",
    CharacterNotInRepertoire => "CharacterNotInRepertoire",
    DatetimeFieldOverflow => "DatetimeFieldOverflow",
    DivisionByZero => "DivisionByZero",
    ErrorInAssignment => "ErrorInAssignment",
    EscapeCharacterConflict => "EscapeCharacterConflict",
    IndicatorOverflow => "IndicatorOverflow",
    IntervalFieldOverflow => "IntervalFieldOverflow",
    InvalidArgumentForLogarithm => "InvalidArgumentForLogarithm",
    InvalidArgumentForNtileFunction => "InvalidArgumentForNtileFunction",
    InvalidArgumentForNthValueFunction => "InvalidArgumentForNthValueFunction",
    InvalidArgumentForPowerFunction => "InvalidArgumentForPowerFunction",
    InvalidArgumentForWidthBucketFunction => "InvalidArgumentForWidthBucketFunction",
    InvalidCharacterValueForCast => "InvalidCharacterValueForCast",
    InvalidDatetimeFormat => "InvalidDatetimeFormat",
    InvalidEscapeCharacter => "InvalidEscapeCharacter",
    InvalidEscapeOctet => "InvalidEscapeOctet",
    InvalidEscapeSequence => "InvalidEscapeSequence",
    NonstandardUseOfEscapeCharacter => "NonstandardUseOfEscapeCharacter",
    InvalidIndicatorParameterValue => "InvalidIndicatorParameterValue",
    InvalidParameterValue => "InvalidParameterValue",
    InvalidPrecedingOrFollowingSize => "InvalidPrecedingOrFollowingSize",
    InvalidRegularExpression => "InvalidRegularExpression",
    InvalidRowCountInLimitClause => "InvalidRowCountInLimitClause",
    InvalidRowCountInResultOffsetClause => "InvalidRowCountInResultOffsetClause",
    InvalidTablesampleArgument => "InvalidTablesampleArgument",
    InvalidTablesampleRepeat => "InvalidTablesampleRepeat",
    InvalidTimeZoneDisplacementValue => "InvalidTimeZoneDisplacementValue",
    InvalidUseOfEscapeCharacter => "InvalidUseOfEscapeCharacter",
    MostSpecificTypeMismatch => "MostSpecificTypeMismatch",
    NullValueNotAllowed => "NullValueNotAllowed",
    NullValueNoIndicatorParameter => "NullValueNoIndicatorParameter",
    NumericValueOutOfRange => "NumericValueOutOfRange",
    SequenceGeneratorLimitExceeded => "SequenceGeneratorLimitExceeded",
    StringDataLengthMismatch => "StringDataLengthMismatch",
    StringDataRightTruncation => "StringDataRightTruncation",
    SubstringError => "SubstringError",
    TrimError => "TrimError",
    UnterminatedCString => "UnterminatedCString",
    ZeroLengthCharacterString => "ZeroLengthCharacterString",
    FloatingPointException => "FloatingPointException",
    InvalidTextRepresentation => "InvalidTextRepresentation",
    InvalidBinaryRepresentation => "InvalidBinaryRepresentation",
    BadCopyFileFormat => "BadCopyFileFormat",
    UntranslatableCharacter => "UntranslatableCharacter",
    NotAnXmlDocument => "NotAnXmlDocument",
    InvalidXmlDocument => "InvalidXmlDocument",
    InvalidXmlContent => "InvalidXmlContent",
    InvalidXmlComment => "InvalidXmlComment",
    InvalidXmlProcessingInstruction => "InvalidXmlProcessingInstruction",
    IntegrityConstraintViolation => "IntegrityConstraintViolation",
    RestrictViolation => "RestrictViolation",
    NotNullViolation => "NotNullViolation",
    ForeignKeyViolation => "ForeignKeyViolation",
    UniqueViolation => "UniqueViolation",
    CheckViolation => "CheckViolation",
    ExclusionViolation => "ExclusionViolation",
    InvalidCursorState => "InvalidCursorState",
    InvalidTransactionState => "InvalidTransactionState",
    ActiveSqlTransaction => "ActiveSqlTransaction",
    BranchTransactionAlreadyActive => "BranchTransactionAlreadyActive",
    HeldCursorRequiresSameIsolationLevel => "HeldCursorRequiresSameIsolationLevel",
    InappropriateAccessModeForBranchTransaction => "InappropriateAccessModeForBranchTransaction",
    InappropriateIsolationLevelForBranchTransaction => "InappropriateIsolationLevelForBranchTransaction",
    NoActiveSqlTransactionForBranchTransaction => "NoActiveSqlTransactionForBranchTransaction",
    ReadOnlySqlTransaction => "ReadOnlySqlTransaction",
    SchemaAndDataStatementMixingNotSupported => "SchemaAndDataStatementMixingNotSupported",
    NoActiveSqlTransaction => "NoActiveSqlTransaction",
    InFailedSqlTransaction => "InFailedSqlTransaction",
    IdleInTransactionSessionTimeout => "IdleInTransactionSessionTimeout",
    InvalidSqlStatementName => "InvalidSqlStatementName",
    TriggeredDataChangeViolation => "TriggeredDataChangeViolation",
    InvalidAuthorizationSpecification => "InvalidAuthorizationSpecification",
    InvalidPassword => "InvalidPassword",
    DependentPrivilegeDescriptorsStillExist => "DependentPrivilegeDescriptorsStillExist",
    DependentObjectsStillExist => "DependentObjectsStillExist",
    InvalidTransactionTermination => "InvalidTransactionTermination",
    SqlRoutineException => "SqlRoutineException",
    FunctionExecutedNoReturnStatement => "FunctionExecutedNoReturnStatement",
    ModifyingSqlDataNotPermitted => "ModifyingSqlDataNotPermitted",
    ProhibitedSqlStatementAttempted => "ProhibitedSqlStatementAttempted",
    ReadingSqlDataNotPermitted => "ReadingSqlDataNotPermitted",
    InvalidCursorName => "InvalidCursorName",
    ExternalRoutineException => "ExternalRoutineException",
    ContainingSqlNotPermitted => "ContainingSqlNotPermitted",
    ModifyingSqlDataNotPermittedExt => "ModifyingSqlDataNotPermittedExt",
    ProhibitedSqlStatementAttemptedExt => "ProhibitedSqlStatementAttemptedExt",
    ReadingSqlDataNotPermittedExt => "ReadingSqlDataNotPermittedExt",
    ExternalRoutineInvocationException => "ExternalRoutineInvocationException",
    InvalidSqlstateReturned => "InvalidSqlstateReturned",
    NullValueNotAllowedExt => "NullValueNotAllowedExt",
    TriggerProtocolViolated => "TriggerProtocolViolated",
    SrfProtocolViolated => "SrfProtocolViolated",
    EventTriggerProtocolViolated => "EventTriggerProtocolViolated",
    SavepointException => "SavepointException",
    InvalidSavepointSpecification => "InvalidSavepointSpecification",
    InvalidCatalogName => "InvalidCatalogName",
    InvalidSchemaName => "InvalidSchemaName",
    TransactionRollback => "TransactionRollback",
    TransactionIntegrityConstraintViolation => "TransactionIntegrityConstraintViolation",
    SerializationFailure => "SerializationFailure",
    StatementCompletionUnknown => "StatementCompletionUnknown",
    DeadlockDetected => "DeadlockDetected",
    SyntaxErrorOrAccessRuleViolation => "SyntaxErrorOrAccessRuleViolation",
    SyntaxError => "SyntaxError",
    InsufficientPrivilege => "InsufficientPrivilege",
    CannotCoerce => "CannotCoerce",
    GroupingError => "GroupingError",
    WindowingError => "WindowingError",
    InvalidRecursion => "InvalidRecursion",
    InvalidForeignKey => "InvalidForeignKey",
    InvalidName => "InvalidName",
    NameTooLong => "NameTooLong",
    ReservedName => "ReservedName",
    DatatypeMismatch => "DatatypeMismatch",
    IndeterminateDatatype => "IndeterminateDatatype",
    CollationMismatch => "CollationMismatch",
    IndeterminateCollation => "IndeterminateCollation",
    WrongObjectType => "WrongObjectType",
    GeneratedAlways => "GeneratedAlways",
    UndefinedColumn => "UndefinedColumn",
    UndefinedFunction => "UndefinedFunction",
    UndefinedTable => "UndefinedTable",
    UndefinedParameter => "UndefinedParameter",
    UndefinedObject => "UndefinedObject",
    DuplicateColumn => "DuplicateColumn",
    DuplicateCursor => "DuplicateCursor",
    DuplicateDatabase => "DuplicateDatabase",
    DuplicateFunction => "DuplicateFunction",
    DuplicatePreparedStatement => "DuplicatePreparedStatement",
    DuplicateSchema => "DuplicateSchema",
    DuplicateTable => "DuplicateTable",
    DuplicateAlias => "DuplicateAlias",
    DuplicateObject => "DuplicateObject",
    AmbiguousColumn => "AmbiguousColumn",
    AmbiguousFunction => "AmbiguousFunction",
    AmbiguousParameter => "AmbiguousParameter",
    AmbiguousAlias => "AmbiguousAlias",
    InvalidColumnReference => "InvalidColumnReference",
    InvalidColumnDefinition => "InvalidColumnDefinition",
    InvalidCursorDefinition => "InvalidCursorDefinition",
    InvalidDatabaseDefinition => "InvalidDatabaseDefinition",
    InvalidFunctionDefinition => "InvalidFunctionDefinition",
    InvalidPreparedStatementDefinition => "InvalidPreparedStatementDefinition",
    InvalidSchemaDefinition => "InvalidSchemaDefinition",
    InvalidTableDefinition => "InvalidTableDefinition",
    InvalidObjectDefinition => "InvalidObjectDefinition",
    WithCheckOptionViolation => "WithCheckOptionViolation",
    InsufficientResources => "InsufficientResources",
    DiskFull => "DiskFull",
    OutOfMemory => "OutOfMemory",
    TooManyConnections => "TooManyConnections",
    ConfigurationLimitExceeded => "ConfigurationLimitExceeded",
    ProgramLimitExceeded => "ProgramLimitExceeded",
    StatementTooComplex => "StatementTooComplex",
    TooManyColumns => "TooManyColumns",
    TooManyArguments => "TooManyArguments",
    ObjectNotInPrerequisiteState => "ObjectNotInPrerequisiteState",
    ObjectInUse => "ObjectInUse",
    CantChangeRuntimeParam => "CantChangeRuntimeParam",
    LockNotAvailable => "LockNotAvailable",
    OperatorIntervention => "OperatorIntervention",
    QueryCanceled => "QueryCanceled",
    AdminShutdown => "AdminShutdown",
    CrashShutdown => "CrashShutdown",
    CannotConnectNow => "CannotConnectNow",
    DatabaseDropped => "DatabaseDropped",
    SystemError => "SystemError",
    IoError => "IoError",
    UndefinedFile => "UndefinedFile",
    DuplicateFile => "DuplicateFile",
    SnapshotTooOld => "SnapshotTooOld",
    ConfigFileError => "ConfigFileError",
    LockFileExists => "LockFileExists",
    FdwError => "FdwError",
    FdwColumnNameNotFound => "FdwColumnNameNotFound",
    FdwDynamicParameterValueNeeded => "FdwDynamicParameterValueNeeded",
    FdwFunctionSequenceError => "FdwFunctionSequenceError",
    FdwInconsistentDescriptorInformation => "FdwInconsistentDescriptorInformation",
    FdwInvalidAttributeValue => "FdwInvalidAttributeValue",
    FdwInvalidColumnName => "FdwInvalidColumnName",
    FdwInvalidColumnNumber => "FdwInvalidColumnNumber",
    FdwInvalidDataType => "FdwInvalidDataType",
    FdwInvalidDataTypeDescriptors => "FdwInvalidDataTypeDescriptors",
    FdwInvalidDescriptorFieldIdentifier => "FdwInvalidDescriptorFieldIdentifier",
    FdwInvalidHandle => "FdwInvalidHandle",
    FdwInvalidOptionIndex => "FdwInvalidOptionIndex",
    FdwInvalidOptionName => "FdwInvalidOptionName",
    FdwInvalidStringLengthOrBufferLength => "FdwInvalidStringLengthOrBufferLength",
    FdwInvalidStringFormat => "FdwInvalidStringFormat",
    FdwInvalidUseOfNullPointer => "FdwInvalidUseOfNullPointer",
    FdwTooManyHandles => "FdwTooManyHandles",
    FdwOutOfMemory => "FdwOutOfMemory",
    FdwNoSchemas => "FdwNoSchemas",
    FdwOptionNameNotFound => "FdwOptionNameNotFound",
    FdwReplyHandle => "FdwReplyHandle",
    FdwSchemaNotFound => "FdwSchemaNotFound",
    FdwTableNotFound => "FdwTableNotFound",
    FdwUnableToCreateExecution => "FdwUnableToCreateExecution",
    FdwUnableToCreateReply => "FdwUnableToCreateReply",
    FdwUnableToEstablishConnection => "FdwUnableToEstablishConnection",
    PlpgsqlError => "PlpgsqlError",
    RaiseException => "RaiseException",
    NoDataFound => "NoDataFound",
    TooManyRows => "TooManyRows",
    AssertFailure => "AssertFailure",
    InternalError => "InternalError",
    DataCorrupted => "DataCorrupted",
    IndexCorrupted => "IndexCorrupted",
)
