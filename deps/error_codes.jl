using EzXML
using HTTP

const ERROR_CODE_APPENDIX = "https://www.postgresql.org/docs/current/errcodes-appendix.html"

pascalcase(str) = replace(titlecase(str), '_' => "")

const BASE_CODE = """# autogenerated by deps/error_codes.jl using $ERROR_CODE_APPENDIX
struct Class
    chars::NTuple{2, Char}
end

Class(str::String) = Class(NTuple{2, Char}(codeunits(str)))

macro c_str(str)
    Class(str)
end

function Base.show(io::IO, c::Class)
    print(io, "c\\\"", c.chars..., '"')
end

struct ErrorCode
    chars::NTuple{5, Char}
end

ErrorCode(str::String) = ErrorCode(NTuple{5, Char}(codeunits(str)))

macro e_str(str)
    ErrorCode(str)
end

function Base.show(io::IO, e::ErrorCode)
    print(io, "e\\\"", e.chars..., '"')
end
"""

eval(Meta.parse("""
begin
    $BASE_CODE
end"""))

# --------------

const SUCCESS_CLASS = Class("00")
const WARNING_CLASSES = (Class("01"), Class("02"))
const EXTERNAL_CLASSES = (Class("38"), Class("39"))

error_code_html(url=ERROR_CODE_APPENDIX) = String(HTTP.get(url))

function error_code_table(html)
    parsed = parsehtml(html)

    return findfirst("//table[@summary='PostgreSQL Error Codes']", parsed)
end

parse_row(node) = map(nodecontent, findall("td/code", node))

function generate_error_codes(io, html=error_code_html())
    table = error_code_table(html)
    rows = findall("tbody/tr/td/code/../..", table)
    id_names = Set{String}()

    error_names_io = IOBuffer()

    println(error_names_io, "\n\nconst ERROR_NAMES = Dict(")

    print(io, BASE_CODE)

    for row in rows
        code, name = parse_row(row)

        id_name = pascalcase(name)
        class = Class(code)
        error_code = ErrorCode(code)

        if endswith(code, "000")
            suffix = class in (SUCCESS_CLASS, WARNING_CLASSES...) ? "Class" : "ErrorClass"

            println(io, "\n\nconst $(id_name)$(suffix) = PQResultError{$class}\n")
        end

        if class in WARNING_CLASSES
            id_name *= "Warning"
        end

        if id_name in id_names
            if class in EXTERNAL_CLASSES
                id_name *= "Ext"  # like psycopg2
            else
                error("Duplicate identifier: $id_name")
            end
        end

        push!(id_names, id_name)

        println(io, "const $(id_name) = PQResultError{$class, $error_code}")
        println(error_names_io, "    $id_name => \"$id_name\",")
    end
    println(error_names_io, ")")

    seekstart(error_names_io)
    write(io, error_names_io)

    return
end

function main()
    if length(ARGS) > 0
        open(ARGS[1], "w") do fp
            generate_error_codes(fp)
        end
    else
        generate_error_codes(stdout)
    end
end

abspath(PROGRAM_FILE) == @__FILE__() && main()
